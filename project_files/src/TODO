Norme:
- [x]	Libft
- [x]	incl
	- [x] ft_lex.h
	- [x] ft_lex.h line 58 prefix
- [x]	env
	- [x] env_path.c
- [x]	exec
	- [x] builtins
	- [x] builtin_search (too many lines) #DONE, check if norme
	- [x] exec.c (too many lines) #DONE, check if norme and compiles + move one function out
- [x]	lex
	- [x] lex_read.c (too many lines) #DONE, check if norme
- [x]	parser
	- [x] handle_token.c (too many lines) #DONE, check if norme
- [x]	main
- [x]	errno

Other:
- [x]	change all the headers
- [x]	builtins exit code
- [x]	check if global composit string in parser is correctly implemented


TESTS:

- [] echo
	- [] echo ""
	- [] echo "yesy"
	- [] echo test test
	- [] "echo" test
	- [] 'echo' "test"
	- [] echo -n
	- [] echo "\""
	- [] echo "\"
	- [] echo hoi -n
- [] cd
	- [] relative path
	- [] absolute path
	- [] cd "\$HOME"
- [] pwd
- [] export
	- [] export test=hello
	- [] export TEST=hello
	- [] export kip=ei===melk
	- [] export 1hello_world
	- [] export LS="ls -la";$LS
- [] env
	- [] echo $TEST
	- [] echo "$TEST"
	- [] echo ${TEST}
    - [] echo "${TEST}"
    - [] echo $1234
    - [] echo $_1234
- [] unset
	- [] unset test
	- [] unset TEST
	- [] unset $TEST (??)
	- [] unset PATH;ls
- [] exit
	- [] exit 42
	- [] exit prints "exit\n"
	- [] exit 1 2 3
	- [] exit hello
- [] ;
- [] ''
- [] ""
- [] <, >, >>
	- [] < in
	- [] > out
	- [] >> out
	- [] echo > file1 hello >file2 world! > file3 | cat -e ??????
	- [] ls >> file3 | cat < file3
	- [] ls >>>>>>>>>> file
- [] |
	- [] up to 20 (??)
- [] $?
- [] signals
	- [] ctrl-C SIG_INT		-> print nothing
	- [] ctrl-D	EOF			-> print "exit\n" (??)
	- [] ctrl-\ SIG_QUIT 	-> print "Quit\n" (ignore in parent, only for child)

- [] echo hey > yes; cat yes; echo bye < yes | cat -e > lol; cat lol
- [] chmod 000 on an executable and try to use it with minishell (check exit status)
- [] try to type something and then sending and EOF (?????????)

- [] REDO ALL THE TESTS IN VALGRIND
- [] CHECK FOR NORM AGAIN